# Barebones of continuous integration in stages

# Much, much room for optimization and bringing closer to the real world

name: LabDemo.MinimalApi.BuildByStages
run-name: ${{ github.actor }} is experimenting with GitHub actions 🚀
on: [push]

env:
    SOLUTION: LabDemo.MinimalApi
    PROJECT: LabDemo.MinimalApi

jobs:

  #============================================================
  #  BUILD STAGE
  #
  #  IN-PROGRESS: Implementing caching 
  #

  build:
    name: Build the API

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['7.x.x' ]

    steps:       
    - name: Checkout
      uses: actions/checkout@v3
      #with:
      #  fetch-depth: 0
      #  submodules: recursive

    # TODO: only for debug
    - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Before
      working-directory: .
      run: |
        echo "SOLUTION = $SOLUTION"
        echo "PROJECT = $PROJECT"
        echo "Total solution storage consumption before job for ${PWD}:" 
        du -sh ./*

    - name: Build the project
      run: |        
        cd $PROJECT
        dotnet restore --packages ..\nuget
        dotnet build -c Release --no-incremental --no-restore --source ..\nuget -o ..\build

    - name: TODO-cache-dependencies
      id: cache-nuget-dependencies
      uses: actions/cache@v3
      env:
        cache_name: cache-node-modules
      with:
        path: ./nuget
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: TODO-cache-dependencies
      run: echo "TODO cache build"

    - name: After
      run: |
        echo "Total solution storage consumption before job for ${PWD}:" 
        du -sh ./*
        
  #============================================================
  #  TEST STAGE

  test:
    name: Black-box test the API

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: .

    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: ['7.x.x' ]

    needs: [build]    
    
    env:
      TEST_PROJECT: LabDemo.MinimalApi.Tests

    steps:

    - name: Checkout
      uses: actions/checkout@v3
      #with:
      #  fetch-depth: 0
      
    # TODO: only for debug
    - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Before
      run: |
        echo "SOLUTION = $SOLUTION"
        echo "TEST_PROJECT = $TEST_PROJECT"
        echo "Running in ${PWD}"
        echo "Total solution storage consumption before job for ${PWD}:" 
        du -sh ./*

    - name: Run the black box tests
      run: |
        cd $TEST_PROJECT
        dotnet test

    - name: After
      run: |
        echo "Total solution storage consumption before job for ${PWD}:" 
        du -sh ./*

  #============================================================
  #  PUBLISH STAGE


  # FUTURE:
  # Right now, this repeats steps done in previous stages on purpose
  # Later, optimize by caching nuget dependencies and either caching or artifacting the build output

  publish:
    name: Black-box test the API

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: .

    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: ['7.x.x' ]

    needs: [build, test]    
        
    steps:

      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '7.x'
          include-prerelease: true

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/publish

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: ${PROJECT}
          path: ${{env.DOTNET_ROOT}}/publish

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: ${PROJECT}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'LabDemo-MinimalApi-Code'
          slot-name: 'production'
          publish-profile: ${{ secrets.AzureAppService_PublishProfile_a3c3d11e8d764bfdbf88856aa7a173c4 }}
          package: .