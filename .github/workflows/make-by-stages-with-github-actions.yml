###########################################################################################
#
# Barebones of continuous integration in stages
#
# Much, much room for optimization and bringing closer to the real world
#
# 1. Check the build
# 2. Test the api
# 3. Publish the api
# 4. Deploy the api to azure
#
# See README.md for further details
#
#
# TRACEABILITY
#
#   A crude approach where steps dump output is the traceability of the moment.
#   OpenTelemetry looks interesting, but is beyond scope for noe
#

name: LabDemo.MinimalApi.BuildByStages
run-name: ${{ github.actor }} is experimenting with GitHub actions 🚀
on: [push]

env:    
    SOLUTION: LabDemo.MinimalApi
    PROJECT: LabDemo.MinimalApi
    TEST_PROJECT: LabDemo.MinimalApi.Tests
    NUGET_SOURCE: https://api.nuget.org/v3/index.json
    NUGET_PATH: nuget

jobs:

  #============================================================
  #  BUILD STAGE
  #
  #  Ensures that the solution builds without errors with each push to the remote repo
  #  Restores external dependencies and builds the API
  #

  build:
    name: Build API
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:       
       
    - name: Checkout
      uses: actions/checkout@v3

    - name: Restore and build 
      run: |
        dotnet --version
        echo "Total solution storage consumption before job for ${PWD}:" 
        du -sh ./*
        dotnet build -c Release --no-incremental -o ./buildtest
        echo "Total solution storage consumption after job for ${PWD}:" 
        du -sh ./*
        
  ##============================================================
  ##  TEST STAGE
  ##
  
  test:
    name: API Black-Box Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    needs: [build]       
    steps:     

    - name: Checkout
      uses: actions/checkout@v3

    - name: Test all of the solution with artifacts from previous job
      run: |        
        echo "Total solution storage consumption before job for ${PWD}:" 
        du -sh ./*
        dotnet test -c Release -o ./buildtest
        echo "Total solution storage consumption after job for ${PWD}:" 
        du -sh ./*


  #============================================================
  #  PUBLISH STAGE

  publish:
    name: Publish the API
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    needs: [test]    
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Publish the api
      run: |
        echo "Total solution storage consumption before job for ${PWD}:" 
        du -sh ./*
        dotnet publish -c Release -p:OutDir=./buildtest -o ./publish
        echo "Total solution storage consumption before job for ${PWD}:" 
        du -sh ./*


  #============================================================
  #  DEPLOY STAGE

  deploy-azure:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    needs: [publish]    
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Publish the api
      run: dotnet publish -c Release -p:OutDir=./buildtest -o ./publish

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'LabDemo-MinimalApi-Code'
        slot-name: 'production'
        publish-profile: ${{ secrets.AzureAppService_PublishProfile_a3c3d11e8d764bfdbf88856aa7a173c4 }}
        package: ./publish