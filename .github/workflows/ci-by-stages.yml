###########################################################################################
#
# Barebones of continuous integration in stages
#
# Much, much room for optimization and bringing closer to the real world
#
# 1. Check the build
# 2. Test the api
# 3. Publish the api
# 4. Deploy the api to azure
#
# See README.md for further details
#
#
# TRACEABILITY
#
#   A crude approach where steps dump output is the traceability of the moment.
#   OpenTelemetry looks interesting, but is beyond scope for noe
#

name: LabDemo.MinimalApi.BuildByStages
run-name: ${{ github.actor }} is experimenting with GitHub actions 🚀
on: [workflow_dispatch, pull_request, push]

env:    
    PROJECT: LabDemo.MinimalApi
    TEST_PROJECT: LabDemo.MinimalApi.Tests
    BUILD_ARTIFACT_NAME: build
    PUBLISH_ARTIFACT_NAME: publish
    BUILD_PATH: build
    PUBLISH_PATH: publish
    AZURE_WEBAPP_NAME: LabDemoAPI
    AZURE_WEBAPP_PACKAGE_PATH: ${PROJECT}/${BUILD_PATH}
    AZURE_APIM_RESOURCE_PATH: /
    AZURE_APIM_RESOURCEGROUP: dev-01
    AZURE_APIM_SERVICENAME: LabDemoApiService
    AZURE_APIM_API_ID: LabDemoApi
    AZURE_APIM_APPSERVICEURL: https://labdemoapi.azurewebsites.net
    SWASHBUCLE_ASPNET_CORE_CLI_PACKAGE_VERSION: 6.4.0
    SWASHBUCKLE_DOTNET_CORE_VERSION: 6.4.x
    API_IMPORT_SPECIFICATION_PATH:  $PUBLISH_PATH/swagger.json
    API_IMPORT_DLL: $PUBLISH_PATH/LabDemo.MinimalApi.dll
    API_IMPORT_VERSION: v1
    CONFIGURATION: Release
    DOTNET_CORE_VERSION: 7.0.x
    WORKING_DIRECTORY: $PROJECT

jobs:

  #============================================================
  #  BUILD STAGE
  #
  #  Ensures that the solution builds without errors with each push to the remote repo
  #  Restores external dependencies and builds the API
  #  Caching nuget dependencies is a bit overkill for a small project, but
  #  good practice
  #
  #  A nuget.config file has been added to the solution, which will hopefully 
  #  direct all dotnet CLI steps to the appropriate source and package directory
  #
  #  The path of 'nuget' is synchronized with the ci bash shell script included in
  #  the solution; the ci script can be used to emulate the steps taken here, emulating
  #  in the local environment
  
  build:
    name: Build API
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:       

    - name: Manually validate version
      run: |
        dotnet --version
       
    - name: Checkout
      uses: actions/checkout@v3

    - name: Cache the nuget for the app project
      id: cache-nuget
      uses: actions/cache@v3
      with:
        path: nuget
        key: nuget-app-${{ hashFiles('LabDemo.MinimalApi/LabDemo.MinimalApi.csproj')}}

    - name: Install dependencies
      if: steps.cache-nuget.outpus.cache-hit != true
      run: dotnet restore $PROJECT/$PROJECT.csproj

    - name: Validate directory state
      run: |
        du -sh ./*

    - name: Build just the API subsystem
      run: dotnet build $PROJECT/$PROJECT.csproj -c Release -o $BUILD_PATH

    - name: Validate directory state
      run: |
        du -sh ./*

    - name: Upload artifact for test and publish jobs
      uses: actions/upload-artifact@v3
      with:
        name: ${{env.BUILD_ARTIFACT_NAME}}
        path: ${{env.BUILD_PATH}}
        retention-days: 1
        
  ##============================================================
  ##  TEST STAGE
  ##
  
  test:
    name: API Black-Box Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    needs: [build]       
    steps:     

    - name: Checkout
      uses: actions/checkout@v3

    - name: Validate directory state
      run: |
        du -sh ./*

    - name: Nuget from cache
      id: cache-nuget
      uses: actions/cache@v3
      with:
        path: nuget
        key: nuget-app-${{ hashFiles('LabDemo.MinimalApi/LabDemo.MinimalApi.csproj')}}

    - name: Validate directory state
      run: |
        du -sh ./*

    - name: Download artifact from build job
      uses: actions/download-artifact@v3

    - name: Validate directory state
      run: |
        du -sh ./*

    # artifacts are overkill for this small of project, but done as a 
    # poc and best practice for larger systems

    - name: Test the api
      run: |
        pwd
        du -sh .
        dotnet test $TEST_PROJECT/$TEST_PROJECT.csproj -c Release -o $BUILD_PATH

    - name: Validate directory state
      run: |
        du -sh ./*

  #============================================================
  #  PUBLISH STAGE

  publish:
    name: Publish the API
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    needs: [test]    
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Validate directory state
      run: |
        du -sh ./*

    - name: App's nuget from cache
      id: cache-nuget
      uses: actions/cache@v3
      with:
        path: nuget
        key: nuget-app-${{ hashFiles('LabDemo.MinimalApi/LabDemo.MinimalApi.csproj')}}

    - name: Download artifact from build job
      uses: actions/download-artifact@v3

    - name: Install Swashbuckle CLI .NET Global Tool
      run: dotnet tool install --global Swashbuckle.AspNetCore.Cli --version ${{ env.SWASHBUCLE_ASPNET_CORE_CLI_PACKAGE_VERSION }}

    - name: Validate directory state
      run: |
        du -sh ./*

    # artifacts are overkill for this small of project, but done as a 
    # poc and best practice for larger systems

    - name: Publish the api
      run: dotnet publish $PROJECT/$PROJECT.csproj -c Release -p:OutDir=$BUILD_PATH -o $PUBLISH_PATH

    - name: Generate Open API Specification Document
      run: |
        cd $PROJECT
        swagger tofile --output ../$PUBLISH_PATH/swagger.json ../$PUBLISH_PATH/${PROJECT}.dll "${{ env.API_IMPORT_VERSION }}"

    - name: Validate directory state
      run: |
        du -sh ./*

    - name: Manually validate what is published
      run: ls publish

    - name: Upload artifact for deployment
      uses: actions/upload-artifact@v3
      with:
        name: ${{env.PUBLISH_ARTIFACT_NAME}}
        path: ${{env.PUBLISH_PATH}}
        retention-days: 1

  #============================================================
  #  AZURE DEPLOY
  #
  #  Requires both an app service and an API service pre-configured, and the names must
  #  match

  deploy_azure:
    name: Manually deploy to Azure
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    # this relies on GitHub settings for the production environment
    # that require manual approval before deployment

    environment:
      name: production

    needs: [publish]    
    steps:

    - name: Manually validate version
      run: |
        dotnet --version
      
    - name: Download artifact from publish job
      uses: actions/download-artifact@v3
      with:
        name: ${{env.PUBLISH_ARTIFACT_NAME}}
        path: ${{env.PUBLISH_PATH}}

    - name: Validate artifact presence
      run: |
        if [ -z "$(ls -A ${{env.PUBLISH_PATH}})" ]; then
           exit 1
        fi

    - name: Validate directory state
      run: |
        du -sh ./*

    - name: Deploy to Azure WebApp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: publish
        publish-profile: ${{ secrets.LabDemoAPI_628F }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.LabDemoApiService_SPN }}

    - name: Import API into Azure API Management
      run: az apim api import --path "${{ env.AZURE_APIM_RESOURCE_PATH }}" --resource-group "${{ env.AZURE_APIM_RESOURCEGROUP }}" --service-name "${{ env.AZURE_APIM_SERVICENAME }}" --api-id "${{ env.AZURE_APIM_API_ID }}" --service-url "${{ env.AZURE_APIM_APPSERVICEURL }}" --specification-path "${{ env.API_IMPORT_SPECIFICATION_PATH }}" --specification-format OpenApi --subscription-required false
    - name: logout
      run: >
        az logout

    # FUTURE: ideally, we'd pull the url from a previous step's output
    - name: Basic validation that the api is running
      uses: lakuapik/gh-actions-http-status@v1
      with:
        sites: '["https://labdemoapi.azurewebsites.net/"]'
        expected: '[200]'      
